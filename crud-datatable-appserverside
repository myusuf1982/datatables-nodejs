var express = require('express');
var path = require('path');
var favicon = require('serve-favicon');
var logger = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');
var expressHbs = require('express-handlebars');
var mongoose= require('mongoose');
var session = require('express-session');
var passport = require('passport');
var flash = require('connect-flash');  //belum dipakai maksimal telat keluar
var validator = require('express-validator');

var MongoStore = require('connect-mongo')(session);

//declarasi setiap tambah file di routes folder
var routes = require('./routes/index');  
var userRoutes = require('./routes/user'); 
var sensor = require('./routes/sensor'); //baru
var input = require('./routes/input'); //baru
var daftarsensor = require('./routes/daftarsensor'); //baru
var logsensor = require('./routes/logsensor'); //baru
var output = require('./routes/output'); 

var app = express();

mongoose.connect('127.0.0.1:27017/iot');

require('./config/passport');


// view engine setup
app.engine('.hbs', expressHbs({defaultLayout: 'layout', extname: '.hbs'}));
//app.set('views', path.join(__dirname, 'views')); // TAMBAHAN SAYA
app.set('view engine', '.hbs');

// uncomment after placing your favicon in /public
//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));
app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(validator());
app.use(session({
  secret: 'mysupersecret',
  resave: false,
  saveUninitialized: false,
  
    //2 Add store sessions
  store: new MongoStore({mongooseConnection: mongoose.connection}),
  cookie: { maxAge: 180 * 60 * 1000 }
}));

app.use(flash());
app.use(passport.initialize());
app.use(passport.session());
app.use(express.static(path.join(__dirname, 'public')));

app.use(function (req, res, next) {
  // used as `variables` for the templates
  res.locals.login = req.isAuthenticated();
  
  // 3 Add store sessions
   res.locals.session = req.session;
   next();
});

app.use('/user', userRoutes);  //ini dari declare di paling atas var require
app.use('/', routes);

app.use('/', sensor); //berada di path iot
app.use('/', input); //berada di path iot
app.use('/', daftarsensor); //berada di path iot
app.use('/', logsensor); //berada di path iot
app.use('/', output); //berada di path iot

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  var err = new Error('Not Found');
  err.status = 404;
  next(err);
});

// error handlers

// development error handler
// will print stacktrace
if (app.get('env') === 'development') {
  app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    res.render('error', {
      message: err.message,
      error: err
    });
  });
}

// production error handler
// no stacktraces leaked to user
app.use(function(err, req, res, next) {
  res.status(err.status || 500);
  res.render('error', {
    message: err.message,
    error: {}
  });
});

module.exports = app;
